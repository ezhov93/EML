<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cpp_libs_prj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cpp_libs_prj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Mar 01 12:36:30 2019
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop() &rArr; EPrint::println(double, int) &rArr; EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[27]">BACKUP_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[17]">CAN1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[18]">CAN2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[25]">COMPARATOR_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1a]">DMA_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[28]">EXT_INT1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[29]">EXT_INT2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[2a]">EXT_INT3_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[2b]">EXT_INT4_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1e]">I2C_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1f]">POWER_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[39]">Reset_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[26]">SSP2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from etime.o(i.SysTick_Handler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from system_mdr32f9qx.o(i.SystemInit) referenced from startup_mdr32f9qx.o(.text)
 <LI><a href="#[21]">Timer1_IRQHandler</a> from etimer.o(i.Timer1_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[22]">Timer2_IRQHandler</a> from etimer.o(i.Timer2_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[23]">Timer3_IRQHandler</a> from etimer.o(i.Timer3_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from eserial.o(i.UART1_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1c]">UART2_IRQHandler</a> from eserial.o(i.UART2_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[19]">USB_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[2e]">timerEvent()</a> from test.o(i._Z10timerEventv) referenced from test.o(i._Z5setupv)
 <LI><a href="#[2f]">recvEvent()</a> from test.o(i._Z9recvEventv) referenced from test.o(i._Z5setupv)
 <LI><a href="#[36]">[local to main_cpp]::premain()</a> from main.o(i._ZN25_INTERNAL_8_main_cpp_main7premainEv) referenced from main.o(.init_array.00101)
 <LI><a href="#[37]">[local to eserial_cpp]::initialize()</a> from eserial.o(i._ZN33_INTERNAL_11_eserial_cpp_5828e5a710initializeEv) referenced from eserial.o(.init_array.00101)
 <LI><a href="#[32]">EPrint::write(const char*)</a> from eprint.o(i._ZN6EPrint5writeEPKc) referenced from eserial.o(.constdata__ZTV7ESerial)
 <LI><a href="#[33]">EPrint::write(const void*, unsigned)</a> from eprint.o(i._ZN6EPrint5writeEPKvj) referenced from eserial.o(.constdata__ZTV7ESerial)
 <LI><a href="#[35]">ESerial::read()</a> from eserial.o(i._ZN7ESerial4readEv) referenced from eserial.o(.constdata__ZTV7ESerial)
 <LI><a href="#[31]">ESerial::write(unsigned char)</a> from eserial.o(i._ZN7ESerial5writeEh) referenced from eserial.o(.constdata__ZTV7ESerial)
 <LI><a href="#[34]">ESerial::available()</a> from eserial.o(i._ZN7ESerial9availableEv) referenced from eserial.o(.constdata__ZTV7ESerial)
 <LI><a href="#[30]">ESerial::~ESerial()</a> from eserial.o(i._ZN7ESerialD1Ev) referenced from test.o(i.__sti___8_test_cpp_timer)
 <LI><a href="#[3a]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f9qx.o(.text)
 <LI><a href="#[38]">__sti___8_test_cpp_timer</a> from test.o(i.__sti___8_test_cpp_timer) referenced from test.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[43]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[44]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[101]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[102]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop() &rArr; EPrint::println(double, int) &rArr; EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[103]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[104]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[39]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))

<P><STRONG><a name="[105]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[54]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_timer
</UL>

<P><STRONG><a name="[b9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::write(const char*)
</UL>

<P><STRONG><a name="[107]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[52]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[56]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[108]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[58]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[42]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[10a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[5b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[59]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[10c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[5c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[60]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[9e]"></a>ADC1_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC1_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[71]"></a>ADC1_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC1_GetResult))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(Pin)
</UL>

<P><STRONG><a name="[9d]"></a>ADC1_Init</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[6f]"></a>ADC1_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC1_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(Pin)
</UL>

<P><STRONG><a name="[70]"></a>ADC1_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC1_Start))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(Pin)
</UL>

<P><STRONG><a name="[99]"></a>ADC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[9b]"></a>ADC_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[9a]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[9c]"></a>ADCx_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(i.ADCx_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>

<P><STRONG><a name="[92]"></a>DAC1_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC1_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[91]"></a>DAC1_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[75]"></a>DAC1_SetData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC1_SetData))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite(Pin, int)
</UL>

<P><STRONG><a name="[94]"></a>DAC2_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC2_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[93]"></a>DAC2_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[74]"></a>DAC2_SetData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_dac.o(i.DAC2_SetData))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite(Pin, int)
</UL>

<P><STRONG><a name="[84]"></a>PORT_Init</STRONG> (Thumb, 384 bytes, Stack size 52 bytes, mdr32f9qx_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableAllPorts()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[96]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePin(Pin)
</UL>

<P><STRONG><a name="[83]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableAllPorts()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[97]"></a>PORT_WriteBit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mdr32f9qx_port.o(i.PORT_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePin(Pin)
</UL>

<P><STRONG><a name="[7d]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPU_PLLcmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[7c]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPU_PLLconfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[7f]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPU_PLLuse))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[7e]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPUclkPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[80]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPUclkSelection))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[6a]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 348 bytes, Stack size 36 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[62]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
</UL>

<P><STRONG><a name="[7b]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSEconfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[61]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSEstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_HSEstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[7a]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableAllPorts()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::ETimer(int, ETimer::Type)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[63]"></a>Read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eserial.o(i.Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read &rArr; EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, etime.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, system_mdr32f9qx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickSetup()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_mdr32f9qx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>TIMER_BRGInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(i.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::start(int)
</UL>

<P><STRONG><a name="[a0]"></a>TIMER_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::attachInterrupt(void(*)())
</UL>

<P><STRONG><a name="[a1]"></a>TIMER_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::start(int)
</UL>

<P><STRONG><a name="[bc]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(i.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::start(int)
</UL>

<P><STRONG><a name="[c0]"></a>TIMER_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::ETimer(int, ETimer::Type)
</UL>

<P><STRONG><a name="[bb]"></a>TIMER_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::attachInterrupt(void(*)())
</UL>

<P><STRONG><a name="[bd]"></a>TIMER_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::start(int)
</UL>

<P><STRONG><a name="[21]"></a>Timer1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, etimer.o(i.Timer1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer1_IRQHandler &rArr; [local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, etimer.o(i.Timer2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer2_IRQHandler &rArr; [local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, etimer.o(i.Timer3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer3_IRQHandler &rArr; [local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eserial.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART1_IRQHandler &rArr; [local to eserial_cpp]::Handler(Uart*) &rArr; Read &rArr; EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eserial.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART2_IRQHandler &rArr; [local to eserial_cpp]::Handler(Uart*) &rArr; Read &rArr; EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>UART_BRGInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(i.UART_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[a5]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>

<P><STRONG><a name="[c7]"></a>UART_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[c6]"></a>UART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[c5]"></a>UART_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_DMAConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[c3]"></a>UART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[a4]"></a>UART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::write(unsigned char)
</UL>

<P><STRONG><a name="[a3]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>

<P><STRONG><a name="[c4]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[69]"></a>UART_Init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mdr32f9qx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[64]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[6d]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::write(unsigned char)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[6b]"></a>Write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, eserial.o(i.Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Write &rArr; EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
</UL>

<P><STRONG><a name="[6e]"></a>analogRead(Pin)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, epio.o(i._Z10analogRead3Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analogRead(Pin)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SetChannel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[2e]"></a>timerEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test.o(i._Z10timerEventv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timerEvent() &rArr; togglePin(Pin) &rArr; PORT_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePin(Pin)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i._Z5setupv)
</UL>
<P><STRONG><a name="[73]"></a>analogWrite(Pin, int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, epio.o(i._Z11analogWrite3Pini))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SetData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[76]"></a>setCoreClock(float)</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ecore.o(i._Z12setCoreClockf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setCoreClock(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[81]"></a>systickSetup()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, estartup.o(i._Z12systickSetupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systickSetup() &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::premain()
</UL>

<P><STRONG><a name="[82]"></a>disableAllPorts()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, estartup.o(i._Z15disableAllPortsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = disableAllPorts() &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::premain()
</UL>

<P><STRONG><a name="[98]"></a>disableAllInterupts()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, estartup.o(i._Z19disableAllInteruptsv))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::premain()
</UL>

<P><STRONG><a name="[85]"></a>loop()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, test.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = loop() &rArr; EPrint::println(double, int) &rArr; EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::availableForWrite()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(int, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(double, int)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite(Pin, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead(Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>delay(int)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, etime.o(i._Z5delayi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[8b]"></a>setup()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, test.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = setup() &rArr; pinMode(Pin, PinMode) &rArr; [local to epio_cpp]::setupAdc(Pin) &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::attachInterrupt(ESerial::Event, void(*)())
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::start(int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::attachInterrupt(void(*)())
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>millis()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etime.o(i._Z6millisv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(int)
</UL>

<P><STRONG><a name="[8c]"></a>pinMode(Pin, PinMode)</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, epio.o(i._Z7pinMode3Pin7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = pinMode(Pin, PinMode) &rArr; [local to epio_cpp]::setupAdc(Pin) &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_Cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to epio_cpp]::setupAdc(Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[2f]"></a>recvEvent()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, test.o(i._Z9recvEventv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = recvEvent() &rArr; ESerial::read() &rArr; EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::available()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::read()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i._Z5setupv)
</UL>
<P><STRONG><a name="[72]"></a>togglePin(Pin)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, epio.o(i._Z9togglePin3Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = togglePin(Pin) &rArr; PORT_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_WriteBit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerEvent()
</UL>

<P><STRONG><a name="[a7]"></a>EPrint::printFloat(double, unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, eprint.o(i._ZN6EPrint10printFloatEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(long long, int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(int, int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(const char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(double, int)
</UL>

<P><STRONG><a name="[b6]"></a>EPrint::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, eprint.o(i._ZN6EPrint11printNumberEyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(long long, int)
</UL>

<P><STRONG><a name="[ab]"></a>EPrint::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eprint.o(i._ZN6EPrint5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[aa]"></a>EPrint::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eprint.o(i._ZN6EPrint5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(long long, int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printNumber(unsigned long long, unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[b8]"></a>EPrint::print(double, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eprint.o(i._ZN6EPrint5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(double, int)
</UL>

<P><STRONG><a name="[b4]"></a>EPrint::print(int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eprint.o(i._ZN6EPrint5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(int, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>EPrint::print(long long, int)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, eprint.o(i._ZN6EPrint5printExi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(int, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[32]"></a>EPrint::write(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eprint.o(i._ZN6EPrint5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EPrint::write(const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.constdata__ZTV7ESerial)
</UL>
<P><STRONG><a name="[33]"></a>EPrint::write(const void*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, eprint.o(i._ZN6EPrint5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EPrint::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.constdata__ZTV7ESerial)
</UL>
<P><STRONG><a name="[87]"></a>EPrint::println(double, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eprint.o(i._ZN6EPrint7printlnEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EPrint::println(double, int) &rArr; EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[88]"></a>EPrint::println(int, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eprint.o(i._ZN6EPrint7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EPrint::println(int, int) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[ba]"></a>EPrint::println()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eprint.o(i._ZN6EPrint7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EPrint::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(int, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::println(double, int)
</UL>

<P><STRONG><a name="[8d]"></a>ETimer::attachInterrupt(void(*)())</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, etimer.o(i._ZN6ETimer15attachInterruptEPFYvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETimer::attachInterrupt(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[8e]"></a>ETimer::start(int)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, etimer.o(i._ZN6ETimer5startEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETimer::start(int) &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCounter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[bf]"></a>ETimer::ETimer(int, ETimer::Type)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, etimer.o(i._ZN6ETimerC1EiNS_4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETimer::ETimer(int, ETimer::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DeInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_timer
</UL>

<P><STRONG><a name="[10f]"></a>ETimer::ETimer__sub_object(int, ETimer::Type)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, etimer.o(i._ZN6ETimerC1EiNS_4TypeE), UNUSED)

<P><STRONG><a name="[8f]"></a>ESerial::attachInterrupt(ESerial::Event, void(*)())</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, eserial.o(i._ZN7ESerial15attachInterruptENS_5EventEPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[86]"></a>ESerial::availableForWrite()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eserial.o(i._ZN7ESerial17availableForWriteEv))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::count(EPrivate::ERingPrivate&)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::write(unsigned char)
</UL>

<P><STRONG><a name="[35]"></a>ESerial::read()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eserial.o(i._ZN7ESerial4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ESerial::read() &rArr; EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.constdata__ZTV7ESerial)
</UL>
<P><STRONG><a name="[90]"></a>ESerial::begin(unsigned)</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, eserial.o(i._ZN7ESerial5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ESerial::begin(unsigned) &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[31]"></a>ESerial::write(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eserial.o(i._ZN7ESerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ESerial::write(unsigned char) &rArr; EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::availableForWrite()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.constdata__ZTV7ESerial)
</UL>
<P><STRONG><a name="[34]"></a>ESerial::available()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eserial.o(i._ZN7ESerial9availableEv))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::count(EPrivate::ERingPrivate&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.constdata__ZTV7ESerial)
</UL>
<P><STRONG><a name="[c8]"></a>ESerial::ESerial(int, Pin, Pin, int)</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, eserial.o(i._ZN7ESerialC1Ei3PinS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ESerial::ESerial(int, Pin, Pin, int) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::clear(EPrivate::ERingPrivate&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_timer
</UL>

<P><STRONG><a name="[110]"></a>ESerial::ESerial__sub_object(int, Pin, Pin, int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, eserial.o(i._ZN7ESerialC1Ei3PinS0_i), UNUSED)

<P><STRONG><a name="[30]"></a>ESerial::~ESerial()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eserial.o(i._ZN7ESerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESerial::~ESerial() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.__sti___8_test_cpp_timer)
</UL>
<P><STRONG><a name="[111]"></a>ESerial::~ESerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, eserial.o(i._ZN7ESerialD1Ev), UNUSED)

<P><STRONG><a name="[6c]"></a>EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate3popERS0_Pvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::isEmpty(EPrivate::ERingPrivate&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::read()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::write(unsigned char)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[65]"></a>EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate4pushERS0_Pvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::isFull(EPrivate::ERingPrivate&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::write(unsigned char)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[ca]"></a>EPrivate::ERingPrivate::clear(EPrivate::ERingPrivate&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate5clearERS0_))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::ESerial(int, Pin, Pin, int)
</UL>

<P><STRONG><a name="[c1]"></a>EPrivate::ERingPrivate::count(EPrivate::ERingPrivate&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate5countERS0_))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::available()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::availableForWrite()
</UL>

<P><STRONG><a name="[cd]"></a>EPrivate::ERingPrivate::isFull(EPrivate::ERingPrivate&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate6isFullERS0_))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>

<P><STRONG><a name="[cc]"></a>EPrivate::ERingPrivate::isEmpty(EPrivate::ERingPrivate&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ering_private.o(i._ZN8EPrivate12ERingPrivate7isEmptyERS0_))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrivate::ERingPrivate::pop(EPrivate::ERingPrivate&, void*, int)
</UL>

<P><STRONG><a name="[cb]"></a>operator delete (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enew.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::~ESerial()
</UL>

<P><STRONG><a name="[c9]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enew.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::ESerial(int, Pin, Pin, int)
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; loop() &rArr; EPrint::println(double, int) &rArr; EPrint::print(double, int) &rArr; EPrint::printFloat(double, unsigned char) &rArr; EPrint::print(int, int) &rArr; EPrint::print(long long, int) &rArr; EPrint::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[ce]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d2]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[113]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[d8]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d1]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d7]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[db]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[dc]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[df]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCoreClock(float)
</UL>

<P><STRONG><a name="[e0]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[de]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[dd]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPrint::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[38]"></a>__sti___8_test_cpp_timer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, test.o(i.__sti___8_test_cpp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___8_test_cpp_timer &rArr; ESerial::ESerial(int, Pin, Pin, int) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::ESerial(int, Pin, Pin, int)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::ETimer(int, ETimer::Type)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.init_array)
</UL>
<P><STRONG><a name="[95]"></a>[local to epio_cpp]::setupAdc(Pin)</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, epio.o(i._ZN29_INTERNAL_8_epio_cpp_816d10848setupAdcE3Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to epio_cpp]::setupAdc(Pin) &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(Pin, PinMode)
</UL>

<P><STRONG><a name="[36]"></a>[local to main_cpp]::premain()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN25_INTERNAL_8_main_cpp_main7premainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to main_cpp]::premain() &rArr; disableAllPorts() &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableAllInterupts()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableAllPorts()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickSetup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array.00101)
</UL>
<P><STRONG><a name="[a2]"></a>[local to etimer_cpp]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, etimer.o(i._ZN32_INTERNAL_10_etimer_cpp_0aa1e29116__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETimer::attachInterrupt(void(*)())
</UL>

<P><STRONG><a name="[9f]"></a>[local to etimer_cpp]::__NVIC_DisableIRQ(IRQn)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, etimer.o(i._ZN32_INTERNAL_10_etimer_cpp_0aa1e29117__NVIC_DisableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>

<P><STRONG><a name="[67]"></a>[local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, etimer.o(i._ZN32_INTERNAL_10_etimer_cpp_0aa1e2917HandlerEP17MDR_TIMER_TypeDefi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to etimer_cpp]::Handler(MDR_TIMER_TypeDef*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::__NVIC_DisableIRQ(IRQn)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etimer_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>[local to eserial_cpp]::initialize()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eserial.o(i._ZN33_INTERNAL_11_eserial_cpp_5828e5a710initializeEv))
<BR>[Address Reference Count : 1]<UL><LI> eserial.o(.init_array.00101)
</UL>
<P><STRONG><a name="[a6]"></a>[local to eserial_cpp]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eserial.o(i._ZN33_INTERNAL_11_eserial_cpp_5828e5a716__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::Handler(Uart*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESerial::begin(unsigned)
</UL>

<P><STRONG><a name="[68]"></a>[local to eserial_cpp]::Handler(Uart*)</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, eserial.o(i._ZN33_INTERNAL_11_eserial_cpp_5828e5a77HandlerEP4Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = [local to eserial_cpp]::Handler(Uart*) &rArr; Read &rArr; EPrivate::ERingPrivate::push(EPrivate::ERingPrivate&, void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eserial_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[cf]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
